apply plugin: 'com.android.application'
apply plugin: 'me.tatarka.retrolambda'

def globalConf = rootProject.ext

android {
    compileSdkVersion globalConf.androidTargetSdkVersion
    buildToolsVersion globalConf.androidBuildToolsVersion

    defaultConfig {
        applicationId globalConf.androidApplicationIdProduction
        minSdkVersion globalConf.androidMinSdkVersion
        targetSdkVersion globalConf.androidTargetSdkVersion
        versionCode VersionCodeReader.getVersionCode()
        versionName globalConf.versionName
        multiDexEnabled true
    }

    dexOptions {
        javaMaxHeapSize "4g"
    }

    signingConfigs {
        debug {
        }
        release {
            storeFile file(globalConf.keystore)
            storePassword globalConf.keystorePass
            keyAlias globalConf.alias
            keyPassword globalConf.aliasPass
        }
    }

    buildTypes {
        release {
            minifyEnabled true
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
            signingConfig signingConfigs.release
        }
        debug {
            /* This one happens automatically*/
            //signingConfig signingConfigs.debug
            applicationIdSuffix '.debug'
            minifyEnabled false
            versionNameSuffix " Debug"
            debuggable true
        }
    }
    /** this one for separates resource folder
     *  per screen, In case if your screens consist
     *  of big amount of layouts, drawables, etc ..
     **/
    sourceSets {
        main {
            res.srcDirs += ['src/main/res-main',
                           'src/main/res-screen'
            ]
        }
    }

    applicationVariants.all { variant ->

        def filename = "${globalConf.applicationName}-${variant.baseName}-${globalConf.versionName}.apk"

        variant.outputs.each { output ->
            output.outputFile = new File(
                    output.outputFile.parent,
                    filename)
        }
    }

    packagingOptions {
        exclude 'LICENSE.txt'
        exclude 'META-INF/DEPENDENCIES'
        exclude 'META-INF/ASL2.0'
        exclude 'META-INF/NOTICE'
        exclude 'META-INF/NOTICE.txt'
        exclude 'META-INF/LICENSE'
        exclude 'META-INF/LICENSE.txt'
        exclude 'META-INF/services/javax.annotation.processing.Processor'
    }

    compileOptions {
        sourceCompatibility JavaVersion.VERSION_1_8
        targetCompatibility JavaVersion.VERSION_1_8
    }
}

dependencies {
    Map<String, String> dependencies = globalConf.dependencies;

    compile fileTree(dir: 'libs', include: ['*.jar', '*.aar'])
    testCompile  dependencies.jUnit
    compile dependencies.appCompat

}
class VersionCodeReader {
    static def getVersionCode() {
        def defaultVersion = 1
        def code = System.env.BUILD_NUMBER != null ? Integer.parseInt(System.env.BUILD_NUMBER) : defaultVersion
        println code == defaultVersion ? "BUILD_NUMBER not found. Falling back to default version code: $defaultVersion" : "VersionCode is set to $code"
        return code
    }
}